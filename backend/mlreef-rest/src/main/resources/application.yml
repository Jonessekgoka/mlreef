server:
  port: ${MLREEF_BACKEND_PORT:8080}

mlreef:
  system:
    debug: ${DEBUG_MODE:false}
  epf:
    image-tag: ${EPF_IMAGE_TAG:latest}
    experiment-image-tag: ${EXPERIMENT_IMAGE_TAG:latest}
    # When running in docker on a single machine, the EPF will access
    # the Backend via the docker internal hostname backend:8080
    # and Gitlab via the docker hostname gitlab:10080
    backend-url: ${EPF_BACKEND_URL}
    gitlab-url: ${EPF_GITLAB_URL}
    gitlab-force-protocol: ${EPF_GITLAB_FORCE_PROTOCOL:http}
    gitlab-force-port: ${EPF_GITLAB_FORCE_PORT:10080}
    epf-image-path: ${LOCAL_EPF_IMAGE_PATH:"registry.gitlab.com/mlreef/mlreef/epf:${mlreef.epf.image-tag}"}
    experiment-image-path: ${LOCAL_EXPERIMENT_IMAGE_PATH:"registry.gitlab.com/mlreef/mlreef/experiment:${mlreef.epf.experiment-image-tag}"}
    retries-for-pipeline: 0
    pip-server: ${PIP_SERVER:}
    use-docker-host: ${USE_DOCKER_HOST:true}
    update-publish-pipeline-status-interval-msec: 10000
    update-experiment-pipeline-status-interval-msec: 10000
    delay-scheduled-publish-tasks-msec: 5000
    delay-scheduled-pipeline-tasks-msec: 1000
    max-update-publish-status: 11
    time-to-consider-pipeline-failed-sec: 18000 # 5 hours
    update-published-processors-exceed-limit-msec: 3600000 #1 hour
    main-publish-branch: master
    max-processors-for-main-branch: 10
    max-processors-for-nonmain-branch: 10
    dvc-working-dir: ${DVC_WORKING_DIR:/dvc}
    aws-default-region: eu-central-1
  gitlab:
    root-url: ${GITLAB_ROOT_URL}
    admin-user-token: ${GITLAB_ADMIN_TOKEN}
    admin-username: ${GITLAB_ADMIN_USERNAME:mlreef}
    admin-password: ${GITLAB_ADMIN_PASSWORD:password}
  bot-management:
    epf-bot-email-domain: mlreef.com
    epf-bot-password-length: 20
  security:
    gitlab-oauth: false
  scheduler:
    pool-size: 100
  email:
    send-attempts-on-fail: 5
    pause-between-failed-attempts-sec: 60
  password-management:
    reset-password-send-email-interval-sec: 300
    reset-password-token-valid-sec: 600
    password-reset-url: https://mlreef.com/login/password-reset
    password-reset-confirm-url: https://mlreef.com/api/v1/password/confirm
  proxy:
    enabled: ${PROXY_ENABLED:false}
    host: ${PROXY_HOST:localhost}
    port: ${PROXY_PORT:8866}
  init-data:
    enabled: ${ENABLE_INIT_DATA:true}
    path: classpath:db/data/*.*
    command-separators: ; #it's a list, split items with ,
    owner-username: ${GITLAB_ADMIN_USERNAME:mlreef}
    owner-email: mlreef@example.org
    owner-password: ${GITLAB_ADMIN_PASSWORD:password}
    owner-subject-id: aaaa0000-0001-0000-0000-cccccccccccc
    owner-account-id: aaaa0000-0002-0000-0000-aaaaaaaaaaaa
  projects:
    sync-fork: true
    wait-gitlab-fork-sec: 30
    pause-fork-finished-polling-sec: 2
    max-recent-projects-history-size: 10
  oauth2:
    overwrite-redirect-protocol: https
    overwrite-redirect-domain: mlreef.com
    overwrite-redirect-port:
    redirect-on-success: ${OAUTH_REDIRECT_ON_SUCCESS:/user/oauth-reroute}
    redirect-on-failure: ${OAUTH_REDIRECT_ON_FAILURE:/login}
    default-impersonate-token-lifetime-sec: 86400
    put-token-to-cookie: true
    put-token-to-header: true
  files-management:
    storage-place: db #disk, db, memory
    upload-dir: ${UPLOAD_DIR:c:\temp\mlreef}
    download-domain:
    download-path: /api/v1/files/download
    overwrite-download-path-protocol: ${DOWNLOAD_PATH_PROTOCOL:}
    overwrite-download-path-domain: ${DOWNLOAD_PATH_DOMAIN:}
    overwrite-download-path-port:

spring:
  devtools:
    add-properties: false
  data:
    repositories.type: none
    redis:
      repositories:
        enabled: false
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:6000}/${DB_NAME:mlreef_backend}
    username: ${DB_USER:mlreef}
    password: ${DB_PASSWORD:password}
  jpa:
    show-sql: false
    generate-ddl: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        temp.use_jdbc_metadata_defaults: false
    hibernate:
      ddl-auto: none
  flyway:
    baseline-on-migrate: true
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
  session:
    store-type: redis
    redis:
      flush-mode: on_save
      namespace: spring:session
    timeout: 3600 #in seconds - 3600 is 1 hour
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${NOREPLY_EMAIL}
    password: ${NOREPLY_EMAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
  servlet:
    multipart:
      enabled: true
      file-size-threshold: 2KB
      max-file-size: 2000MB
      max-request-size: 2150MB
social:
  github: #https://github.com/settings/developers
    client-id: ${GITHUB_CLIENT_ID:}
    client-secret: ${GITHUB_CLIENT_SECRET:}
    impersonate-token-lifetime-sec: 86400
    scope:
      - read:user
      - user:email
  facebook: #https://developers.facebook.com/
    client-id: ${FACEBOOK_CLIENT_ID:}
    client-secret: ${FACEBOOK_CLIENT_SECRET:}
    impersonate-token-lifetime-sec: 86400
    scope:
      - public_profile
      - email
      #- user_photos
  google: #https://console.cloud.google.com/apis/credentials?pli=1
    client-id: ${GOOGLE_CLIENT_ID:}
    client-secret: ${GOOGLE_CLIENT_SECRET:}
    impersonate-token-lifetime-sec: 86400
    scope:
      - openid
      - profile
      - email
  okta:
    enabled: false #doesn't work and it is not necessary for now
    client-id: ${OKTA_CLIENT_ID:}
    client-secret: ${OKTA_CLIENT_SECRET:}
    impersonate-token-lifetime-sec: 86400
    authorization-uri: dev-845314.okta.com
  gitlab: #https://gitlab.com/oauth/applications , https://docs.gitlab.com/ee/api/oauth2.html#authorization-code-flow
    client-id: ${GITLAB_CLIENT_ID:}
    client-secret: ${GITLAB_CLIENT_SECRET:}
    scope:
      - openid
      - api
      - profile
      - email
    client-name: Gitlab
  linkedin: #https://www.linkedin.com/developers/login
    client-id: ${LINKEDIN_CLIENT_ID:}
    client-secret: ${LINKEDIN_CLIENT_SECRET:}
    authorization-grant-type: authorization_code
    scope:
      - r_liteprofile
      - r_emailaddress
    client-name: LinkedIn
  twitter: #https://developer.twitter.com/en
    client-id: ${TWITTER_CLIENT_ID:}
    client-secret: ${TWITTER_CLIENT_SECRET:}
    #    scope:
    #      - profile
    #      - email
    client-name: Twitter
  live: #https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationsListBlade
    client-id: ${LIVE_CLIENT_ID:}
    client-secret: ${LIVE_CLIENT_SECRET:}
    scope:
      - wl.basic
      - wl.emails
  freelancer: #https://accounts.freelancer-sandbox.com/settings/develop https://accounts.freelancer.com/settings/develop https://developers.freelancer.com/docs/authentication/generating-access-tokens
    client-id: ${FREELANCER_CLIENT_ID:}
    client-secret: ${FREELANCER_CLIENT_SECRET:}
    scope:
      - basic
    debug: false
  azure: #https://docs.microsoft.com/en-us/azure/active-directory/develop/scenario-spa-app-registration#redirect-uri-msaljs-20-with-auth-code-flow https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview
    client-id: ${AZURE_CLIENT_ID:}
    client-secret: ${AZURE_CLIENT_SECRET:}
    scope:
      - openid
      - email
      - User.Read
  salesforce: #https://developer.salesforce.com/docs/atlas.en-us.api_rest.meta/api_rest/intro_oauth_and_connected_apps.htm
    enabled: false #doesn't work
    client-id: ${SALESFORCE_CLIENT_ID:}
    client-secret: ${SALESFORCE_CLIENT_SECRET:}
  stackexchange: #https://stackapps.com/users/join?ssrc=login&returnurl=%2fapps%2foauth%2fregister
    client-id: ${STACKEXCHANGE_CLIENT_ID:}
    client-secret: ${STACKEXCHANGE_CLIENT_SECRET:}
    client-key: ${STACKEXCHANGE_CLIENT_KEY:}

logging:
  pattern:
    console: '%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) %boldGreen([%thread]) %cyan(%logger{15}.%M [%line]) - %msg%n%throwable'
  level:
    org.hibernate.event.internal.DefaultPersistEventListener: INFO


